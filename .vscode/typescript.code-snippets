{
  "Generate Selector File": {
    "prefix": "!selfile",
    "description": "셀렉터 파일을 만든다.",
    "body": [
      "import { createSelector } from '@reduxjs/toolkit';",
      "import { RootState } from '../../../store';",
      "",
      "const sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g} = (state: RootState) => state${2:.whatState};",
      "",
      "export const sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g}${4:WhatState} = createSelector(",
      "  sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g},",
      "  state => {",
      "    const result: ${0} = {",
      "    };",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Single Selector": {
    "prefix": "!selsingle",
    "description": "단일 셀렉터를 만든다.",
    "body": [
      "export const sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g}${2:WhatState} = createSelector(",
      "  sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g},",
      "  state => {",
      "    const result: ${3:WhatModel} = {",
      "    };",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Single Draft Selector": {
    "prefix": "!seldrfsingle",
    "description": "단일 드래프트 셀렉터를 만든다. - 액션이나 이팩트에서 상태값을 셀렉팅 할 때 쓰인다.",
    "body": [
      "export const drf${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g}${2:WhatState} = createDraftSafeSelector(",
      "  sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g},",
      "  state => {",
      "    const result: ${3:WhatModel} = {",
      "    };",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Redux Toolkit - Generate Effect File": {
    "prefix": "!efffile",
    "description": "이펙트 파일을 만든다.",
    "body": [
      "import { createAsyncThunk } from '@reduxjs/toolkit';",
      "import repo from '@core/repo';",
      "",
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async () => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Effect": {
    "prefix": "!effsingle",
    "description": "단일 이펙트 함수를 만든다.",
    "body": [
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async () => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Effect With Redux Api": {
    "prefix": "!effsingleapi",
    "description": "단일 이펙트 함수를 만든다. Redux Api 가 포함되어 있다.",
    "body": [
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk<",
      "  ${3:ReturnType},",
      "  ${4:PayloadType},",
      "  { state: RootState }",
      ">(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async (payload, { getState, dispatch }) => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Effect With Redux Full Api": {
    "prefix": "!effsingleapifull",
    "description": "단일 이펙트 함수를 만든다. 모든 Redux Api 가 포함되어 있다.",
    "body": [
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk<",
      "  ${3:ReturnType},",
      "  ${4:PayloadType},",
      "  { state: RootState, rejectValue: MyRejectType }",
      ">(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async (payload, { getState, dispatch, rejectWithValue, signal, requestId }) => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Normal Action": {
    "prefix": "!actsingle",
    "description": "동기식 액션 하나를 만든다.",
    "body": [
      "export const act${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAction<${3:PayloadType}>(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      ");"
    ]
  },
  "Generate Redux Toolkit - Slice File": {
    "prefix": "!slicefile",
    "description": "리듀서와 액션이 포함된 슬라이스 파일을 만든다.",
    "body": [
      "/* eslint-disable no-param-reassign */",
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "",
      "interface ${TM_FILENAME_BASE/(.*)\\.slice/${1:/capitalize}/g}State {",
      "  loading: boolean;",
      "}",
      "",
      "export function getInit${TM_FILENAME_BASE/(.*)\\.slice/${1:/capitalize}/g}State() {",
      "  const result: ${TM_FILENAME_BASE/(.*)\\.slice/${1:/capitalize}/g}State = {",
      "    loading: true,",
      "  };",
      "  return result;",
      "}",
      "",
      "export const ${TM_FILENAME_BASE/\\.slice//gi}Slice = createSlice({",
      "  name: '${TM_FILENAME_BASE/\\.slice//gi}',",
      "  initialState: getInit${TM_FILENAME_BASE/(.*)\\.slice/${1:/capitalize}/g}State(),",
      "  reducers: {",
      "    reset() {",
      "      return getInit${TM_FILENAME_BASE/(.*)\\.slice/${1:/capitalize}/g}State();",
      "    },",
      "    // actions here.. $0",
      "  },",
      "  extraReducers: builder => {",
      "    builder",
      "      .addCase(effSomeAction.pending, state => {",
      "        state.loading = true;",
      "      })",
      "    ;",
      "  }",
      "});"
    ]
  },
  "Generate Redux Toolkit - Single Action Reducer": {
    "prefix": "!sliceaction",
    "description": "슬라이스 내 액션 리듀서 하나를 만든다.",
    "body": [
      "${1:doSomething}(state, { payload }: PayloadAction<$0>) {",
      "  ",
      "},"
    ]
  },
  "Generate Redux Toolkit - Single Async Action Reducer": {
    "prefix": "!sliceaddcases",
    "description": "슬라이스 내 비동기 액션 리듀서 3종류를 만든다.",
    "body": [
      ".addCase(${1:effAsyncAction}.pending, state => {",
      "  state.loading = true;",
      "})",
      ".addCase(${1:effAsyncAction}.rejected, (state, { payload, error }) => {",
      "  state.loading = false;",
      "})",
      ".addCase(${1:effAsyncAction}.fulfilled, (state, { payload }) => {",
      "  state.loading = false;",
      "  ${0}",
      "})"
    ]
  },
  "Generate Route File": {
    "prefix": "!routes",
    "description": "기능 모듈의 라우트 파일을 만든다.",
    "body": [
      
    ]
  }
}
