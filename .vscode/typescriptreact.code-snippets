{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Event for Click": {
    "prefix": "!hdlclick",
    "description": "클릭 이벤트에 대한 핸들러를 만든다.",
    "body": [
      "const handle${1:Click}: React.MouseEventHandler<${2|HTMLButtonElement,HTMLInputElement,HTMLElement|}> = (e) => {",
      "  ${10}",
      "}"
    ]
  },
  "Event for Change": {
    "prefix": "!hdlchange",
    "description": "변경 이벤트에 대한 핸들러를 만든다.",
    "body": [
      "const handle${1:Change}: React.ChangeEventHandler<${2|HTMLInputElement,HTMLTextAreaElement,HTMLElement|}> = (e) => {",
      "  ${10}",
      "}"
    ]
  },
  "Redux Dispatcher With Event Handler": {
    "prefix": "!hdldispatch",
    "description": "redux dispatch 를 수행하는 핸들러를 만든다.컨테이너에서 이벤트 핸들러를 이용하여 디스패치 할 때 사용한다.",
    "body": [
      "const handle${1:Click} = (${2:args: WhatType}) => {",
      "  dispatch(actions${3:.doSomething}(${4:args}));",
      "};"
    ]
  },
  "React Page Component": {
    "prefix": "!rpc",
    "description": "페이지 컴포넌트를 만든다.",
    "body": [
      "import { FC } from 'react';",
      "import { useDispatch } from 'react-redux';",
      "import { ${2:subModuleFullName}Slice } from '../stores';",
      "import { useQueryParams } from '../../common/hooks/useQueryParams';",
      "import { PageContainer } from '../components/PageContainer';",
      "",
      "const { actions } = ${2}Slice;",
      "",
      "interface ${3:${TM_FILENAME_BASE}Queries} {",
      "  id?: string;",
      "}",
      "",
      "const $TM_FILENAME_BASE: FC = () => {",
      "  const queries = useQueryParams<$3>();",
      "",
      "  return (",
      "    <PageContainer title=\"\">",
      "      $0",
      "    </PageContainer>",
      "  );",
      "};",
      "",
      "export default $TM_FILENAME_BASE;",
      ""
    ]
  },
  "React Container Component": {
    "prefix": "!rcc",
    "description": "컨테이너 컴포넌트를 만든다.",
    "body": [
      "import { FC } from 'react';",
      "import { useDispatch, useSelector } from 'react-redux';",
      "import { ${1:subModuleFullName}Slice } from '../stores';",
      "import { ${3:selSampleItems} } from '../stores/${2:subModuleName}/${1:subModuleFullName}.selector';",
      "",
      "const { actions } = ${1:subModuleFullName}Slice;",
      "",
      "interface ${4:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "export const $TM_FILENAME_BASE: FC<$4> = () => {",
      "  const dispatch = useDispatch();",
      "  const state = useSelector(${3:selSampleItems});",
      "",
      "  return (",
      "    <${10:${TM_FILENAME_BASE/\\Container//gi}}>",
      "    </${10:${TM_FILENAME_BASE/\\Container//gi}}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Single Function Component (legacy)": {
    "prefix": "!rc-legacy",
    "description": "함수형 컴포넌트를 만든다. - 단순한 단일형 컴포넌트. (참고용 레거시)",
    "body": [
      "import { FC } from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "const ${2/(.*)/${0:/capitalize}/} = styled.${2:div}`",
      "",
      "`;",
      "",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  children,",
      "}) => {",
      "  return (",
      "    <${2/(.*)/${0:/capitalize}/}>",
      "      {children}",
      "    </${2/(.*)/${0:/capitalize}/}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Single Function Component": {
    "prefix": "!rc",
    "description": "함수형 컴포넌트를 만든다. - 단순한 단일형 컴포넌트.",
    "body": [
      "import { FC } from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "const ${3:Wrap} = styled.${2:div}`",
      "",
      "`;",
      "",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  children,",
      "}) => {",
      "  return (",
      "    <${3:Wrap}>",
      "      {children}",
      "    </${3:Wrap}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Wapper Function Component": {
    "prefix": "!rwc",
    "description": "함수형 컴포넌트를 만든다. - 래핑되는 컴포넌트.",
    "body": [
      "import { FC } from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "const ${2/(.*)/${0:/capitalize}/} = styled.${2:div}<$1>`",
      "",
      "`;",
      "",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  children,",
      "}) => {",
      "  return (",
      "    <${2/(.*)/${0:/capitalize}/}>",
      "      {children}",
      "    </${2/(.*)/${0:/capitalize}/}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Input Function Component": {
    "prefix": "!ric",
    "description": "함수형 컴포넌트를 만든다. - 입력 요소 컴포넌트.",
    "body": [
      "import { ChangeEventHandler, FC } from 'react';",
      "import styled from 'styled-components';",
      "import { InputComponentProps } from '../../../../common';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} extends InputComponentProps {",
      "  /**",
      "   * 입력을 하지 않았을 때 출력 될 안내 텍스트",
      "   */",
      "  placeholder?: string;",
      "}",
      "",
      "const ${2/(.*)/${0:/capitalize}/} = styled.${2:input}<Omit<$1, 'onChange'>>`",
      "  &:disabled {",
      "    ",
      "  }",
      "`;",
      "",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  disabled,",
      "  className,",
      "  value,",
      "  name,",
      "  onChange,",
      "}) => {",
      "",
      "  const handleChange: ChangeEventHandler<HTMLInputElement> = e => {",
      "    onChange && onChange({",
      "      name,",
      "      value: e.target.value,",
      "    });",
      "  };",
      "",
      "  return (",
      "    <${2/(.*)/${0:/capitalize}/}",
      "      type=\"text\"",
      "      name={name}",
      "      value={value}",
      "      className={className}",
      "      disabled={disabled}",
      "      onChange={handleChange}",
      "    />",
      "  );",
      "};",
      ""
    ]
  },
  "React Storybook Visual Test": {
    "prefix": "!rcs",
    "description": "스토리북을 통한 리액트 비주얼 테스트 코드를 만든다.",
    "body": [
      "/* eslint-disable no-alert */",
      "import { Story, Meta, ArgTypes } from '@storybook/react';",
      "import { actions } from '@storybook/addon-actions';",
      "import { ComponentProps, useState } from 'react';",
      "import { ${1:${TM_FILENAME_BASE/\\.stories//gi}} } from '${2:..}/${1}';",
      "",
      "type MyArgTypes = Partial<Record<keyof ComponentProps<typeof ${1}>, ArgTypes[string]>>;",
      "const argTypesSetting: MyArgTypes = {",
      "};",
      "",
      "export default {",
      "  title: '${3:ChangePlease}/${1}',",
      "  component: ${1},",
      "  argTypes: argTypesSetting,",
      "  parameters: { actions: { argTypesRegex: '^on.*' } }",
      "} as Meta;",
      "",
      "function createActions() {",
      "  return actions('onAnyEvent1', 'onAnyEvent2');",
      "}",
      "",
      "const Template: Story<ComponentProps<typeof ${1}>> = ({ ...props }) => {",
      "  const [state, setState] = useState(props);",
      "  return (",
      "    <${1} {...props}></${1}>",
      "  );",
      "};",
      "",
      "const CHILDREN_TEXT = 'Test Text';",
      "",
      "export const Default = Template.bind({});",
      "Default.args = {",
      "  children: CHILDREN_TEXT,",
      "  ...createActions(),",
      "};",
      ""
    ]
  },
  "React Storybook Visual Test - Simple": {
    "prefix": "!rcsdef",
    "description": "스토리북을 통한 리액트 비주얼 테스트 코드를 만든다.",
    "body": [
      "/* eslint-disable no-alert */",
      "import { Story, Meta, ArgTypes } from '@storybook/react';",
      "import { ComponentProps } from 'react';",
      "import { ${1:${TM_FILENAME_BASE/\\.stories//gi}} } from '${2:..}/${1}';",
      "",
      "type MyArgTypes = Partial<Record<keyof ComponentProps<typeof ${1}>, ArgTypes[string]>>;",
      "const argTypesSetting: MyArgTypes = {",
      "};",
      "",
      "export default {",
      "  title: '${3:ChangePlease}/${1}',",
      "  component: ${1},",
      "  argTypes: argTypesSetting,",
      "  parameters: { actions: { argTypesRegex: '^on.*' } }",
      "} as Meta;",
      "",
      "const Template: Story<ComponentProps<typeof ${1}>> = ({ ...props }) => {",
      "  return (",
      "    <${1} {...props}></${1}>",
      "  );",
      "};",
      "",
      "export const Default = Template.bind({});",
      "Default.args = {",
      "};",
      ""
    ]
  },
  "React Storybook Visual Test - Make Sub": {
    "prefix": "!rcss",
    "description": "스토리북을 통한 하위 리액트 비주얼 테스트 코드를 만든다",
    "body": [
      "const ${2:Some}Template: Story<ComponentProps<typeof ${1:${TM_FILENAME_BASE/\\.stories//gi}}>> = ({ ...props }) => {",
      "  const [state, setState] = useState(props);",
      "  return (",
      "    <${1} {...props}></${1}>",
      "  );",
      "};",
      "",
      "export const ${2} = ${2:Some}Template.bind({});",
      "${2}.args = {",
      "  children: CHILDREN_TEXT,",
      "  ...createActions(),",
      "};"
    ]
  },
  "React Storybook Visual Test - Make Sub From Template": {
    "prefix": "!rcst",
    "description": "스토리북을 통한 하위 리액트 비주얼 테스트 코드를 만든다. 만들어진 스토리 템플릿을 재활용시 쓰인다.",
    "body": [
      "export const ${2:Some} = ${1:Template}.bind({});",
      "${2:Some}.args = {",
      "  children: CHILDREN_TEXT,",
      "  ...createActions(),",
      "  ${10}",
      "};"
    ]
  },
  "react Storybook - ArgType making": {
    "prefix": "!sbarg",
    "description": "스토리북 argType 을 만든다.",
    "body": [
      ": {",
      "  control: {",
      "    type: '${1|text,number,boolean,radio,select|}',",
      "    ${2:options: [],}",
      "  },",
      "  ${3:defaultValue: '',}",
      "},"
    ]
  },
  "React Design System Component": {
    "prefix": "!rcds",
    "description": "디자인 시스템을 위한 컴포넌트를 만든다.",
    "body": [
      "import { ComponentType, forwardRef } from 'react';",
      "import styled from 'styled-components';",
      "import {",
      "  AliasableForTextProps,",
      "  ${3|ThemedTextProps,ThemedButtonProps|},",
      "  UIHTMLComponentProps",
      "} from '../core/ui-core.type';",
      "import { ${2|BaseStyledText,BaseStyledButton|} } from '../base/${2}';",
      "",
      "interface ${1:$TM_FILENAME_BASE}Props",
      "  extends UIHTMLComponentProps,",
      "    ${3},",
      "    AliasableForTextProps {}",
      "",
      "const ReStyledComponent = styled(${2})`",
      "`",
      "",
      "export const ${1}: ComponentType<${1}Props> = forwardRef<",
      "  HTMLElement,",
      "  ${1}Props",
      ">(",
      "  (",
      "    {",
      "      block = true,",
      "      bold = false,",
      "      size = 'md',",
      "      color = 'black',",
      "      as,",
      "      ...props",
      "    },",
      "    ref",
      "  ) => (",
      "    <ReStyledComponent",
      "      {...props}",
      "      forwardedAs={as}",
      "      ref={ref as never}",
      "      \\$block={block}",
      "      \\$bold={bold}",
      "      \\$size={size}",
      "      \\$color={color}",
      "    />",
      "  )",
      ");",
      "",
      "${1}.displayName = '${1}';"
    ]
  }
}
